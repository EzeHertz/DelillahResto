openapi: 3.0.0
# Added by API Auto Mocking Plugin
servers:
  - description: SwaggerHub API Auto Mocking
    url: https://virtserver.swaggerhub.com/EzeHertz/DelillahRestoAPI/1.0.0
info:
  description: API
  version: "1.0.0"
  title: Delillah Resto API
  contact:
    email: you@your-company.com
  license:
    name: Apache 2.0
    url: 'http://www.apache.org/licenses/LICENSE-2.0.html'

paths:

  # USER ENDPOINTS
  
  /usuarios/signup:
    post:
      description: Crear un nuevo usuario
      tags:
      - usuarios
      parameters:
      - name: Usuario
        in: query
        description: Datos del usuario
        schema:
          type: object
          properties:
            NombreCompleto:
              type: string
              description: Nombre Completo
              example: 'Nombre Completo'
            email: 
              type: string
              description: Email del usuario
              example: 'usuario@mail.com'
            tel:
              type: string
              description: Telefono del usuario
              example: '1500001111'
            dirEnvio:
              type: string
              description: Direccion de envio
              example: 'Calle Falsa 123'
            userName:
              type: string
              description: Nombre de usuario
              example: 'NombreDeUsuario'
            pass:
              type: string
              description: Contraseña de usuario
              example: '123asd'
      responses:
        200:
          description: Successful request
          content:
            application/json:
              schema:
                type: string
                example: {message: Usuario creado exitósamente}
        400:
          description: Request not found
          content:
            application/json:
              schema:
                type: string
                example: {message: Error 404. request not found.}
  /usuarios/signin:
    post:
      description: Permite logear al usuario
      tags: 
      - usuarios
      parameters:
        - name: Usuario
          in: query
          description: Datos del usuario
          schema:
            type: object
            properties:
              userName:
                type: string
                description: Nombre de usuario
                example: 'NombreDeUsuario'
              pass:
                type: string
                description: Contraseña de usuario
                example: '123asd'
      responses:
        200:
          description: Successful request
          content:
            application/json:
              schema:
                type: string
                example: {message: Usuario logeado exitósamente}
        400:
          description: Request not found
          content:
            application/json:
              schema:
                type: string
                example: {message: Error 404. request not found.}
                
                
                
  # PEDIDOS
  /pedidos:
    get:
      description: Permite obtener lista de pedidos
      tags: 
      - pedidos
      responses:
        200:
          description: successful request
          content:
            application/json:
              schema:
                type: array
                items:  
                  properties:
                    id_pedido:
                      type: integer
                      description: Id del pedido
                      example: 1
                    estado: 
                      type: string
                      example: 'En proceso'
                    cantidad: 
                      type: integer
                      example: 4
                    hora:
                      type: string
                      example: '10:00'
                    forma_pago:
                      type: boolean
                      example: 1
                    id_usuario:
                      type: integer
                      example: 1
                    id_producto:
                      type: integer
                      example: 2
        400:
          description: Request not found
          content:
            application/json:
              schema:
                type: string
                example: {message: Error 404. request not found.}
    post:
      description: Permite generar un pedido
      tags: 
      - pedidos
      parameters:
        - name: Pedidos
          in: query
          description: Datos del pedido
          schema:
            type: object
            properties:
              forma_pago:
                type: integer
                description: Forma de pago (efectivo 1 o tarjeta 2)
                example: 1
              id_prod:
                type: integer
                description: Id del producto seleccionado
                example: 1
              cantidad:
                type: integer
                description: Cantidad del producto seleccionado
                example: 1
              id_prod2:
                type: integer
                description: Id del producto seleccionado
                example: 2
              cantidad2:
                type: integer
                description: Cantidad del producto seleccionado
                example: 1
      responses:
        200:
          description: Successful request
          content:
            application/json:
              schema:
                type: string
                example: {message: Usuario logeado exitósamente}
        400:
          description: Request not found
          content:
            application/json:
              schema:
                type: string
                example: {message: Error 404. request not found.}
                
    put:
      description: Permite modificar el estado del pedido
      tags: 
      - pedidos
      parameters: 
        - name: Pedido
          in: query
          description: Datos del pedido
          schema:
            type: object
            properties:
              id_pedido:
                type: integer
                description: Id del pedido seleccionado
                example: 2
              estado:
                type: string
                description: Estado a setear
                example: 'confirmado'
      responses:
        200:
          description: Successful request
          content:
            application/json:
              schema:
                type: string
                example: {message: Usuario logeado exitósamente}
        400:
          description: Request not found
          content:
            application/json:
              schema:
                type: string
                example: {message: Error 404. request not found.}

  # PRODUCTOS
  /productos:
    get:
      description: Permite obtener lista de productos
      tags: 
      - productos
      responses:
        200:
          description: successful request
          content:
            application/json:
              schema:
                type: array
                items:  
                  properties:
                    id:
                      type: integer
                      description: Id del producto
                      example: 1
                    nombre: 
                      type: string
                      example: 'Hamburguesa completa'
                    price: 
                      type: number
                      format: float
                      example: 450
                    descripcion:
                      type: string
                      example: 'doble'
        
        400:
          description: Request not found
          content:
            application/json:
              schema:
                type: string
                example: {message: Error 404. request not found.}
    post:
      description: Permite crear productos en la base de datos
      tags: 
      - productos
      parameters:
      - name: Producto
        in: query
        description: Crear nuevo producto
        schema:
          type: object
          properties:
            nombre: 
              type: string
              description: Nombre del producto
              example: 'Hamburguesa'
            precio:
              type: integer
              description: Precio del producto
              example: 450
            descripcion:
              type: string
              description: Descripcion del producto
              example: 'Completa'
      responses:
        200:
          description: Successful request
          content:
            application/json:
              schema:
                type: string
                example: {message: Producto creado exitósamente}
        400:
          description: Request not found
          content:
            application/json:
              schema:
                type: string
                example: {message: Error 404. request not found.}
    put:
      description: Permite modificar el estado del pedido
      tags: 
      - productos
      parameters: 
        - name: Producto
          in: query
          description: Datos del producto
          schema:
            type: object
            properties:
              nombre:
                type: string
                description: Nombre del producto
                example: 'Tapa arterias'
              descripcion:
                type: string
                description: Descripcion de producto
                example: 'Dos hamburguesas con chedar y bacon'
              precio:
                type: number
                format: money
                example: 450
              id_prod: 
                type: integer
                example: 1
      responses:
        200:
          description: Successful request
          content:
            application/json:
              schema:
                type: string
                example: {message: Usuario logeado exitósamente}
        400:
          description: Request not found
          content:
            application/json:
              schema:
                type: string
                example: {message: Error 404. request not found.}
    delete:
      description: Permite eliminar productos de la base de datos (baja logica)
      tags: 
      - productos
      parameters:
      - name: Producto
        in: query
        description: Eliminar producto
        schema:
          type: object
          properties:
            id:
              type: string
              description: Id de producto
              example: 1
      responses:
        200:
          description: Successful request
          content:
            application/json:
              schema:
                type: string
                example: {message: Producto eliminado exitósamente}
        400:
          description: Request not found
          content:
            application/json:
              schema:
                type: string
                example: {message: Error 404. request not found.}